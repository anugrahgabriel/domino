{"version":3,"sources":["DominoWindow.tsx","App.tsx","index.tsx"],"names":["DominoWindow","_ref","onClose","position","setPosition","useState","x","y","isDragging","setIsDragging","isVisible","setIsVisible","dragOffset","useRef","windowRef","handleMouseDown","useCallback","e","current","rect","getBoundingClientRect","clientX","left","clientY","top","preventDefault","handleMouseMove","newX","newY","maxX","window","innerWidth","offsetWidth","maxY","innerHeight","offsetHeight","constrainedX","Math","max","min","constrainedY","handleMouseUp","React","useEffect","document","addEventListener","removeEventListener","_jsxs","ref","className","style","concat","children","onMouseDown","_jsx","onClick","handleClose","App","console","log","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"yNAwGeA,MA5FmCC,IAAkB,IAAjB,QAAEC,GAASD,EAC5D,MAAOE,EAAUC,GAAeC,mBAAmB,CAAEC,EAAG,GAAIC,EAAG,MACxDC,EAAYC,GAAiBJ,oBAAkB,IAC/CK,EAAWC,GAAgBN,oBAAkB,GAC9CO,EAAaC,iBAAiB,CAAEP,EAAG,EAAGC,EAAG,IACzCO,EAAYD,iBAAuB,MAEnCE,EAAkBC,sBAAaC,IACnC,IAAKH,EAAUI,QAAS,OAExBT,GAAc,GACd,MAAMU,EAAOL,EAAUI,QAAQE,wBAC/BR,EAAWM,QAAU,CACnBZ,EAAGW,EAAEI,QAAUF,EAAKG,KACpBf,EAAGU,EAAEM,QAAUJ,EAAKK,KAEtBP,EAAEQ,kBACD,IAEGC,EAAkBV,sBAAaC,IACnC,IAAKT,IAAeM,EAAUI,QAAS,OAEvC,MAAMS,EAAOV,EAAEI,QAAUT,EAAWM,QAAQZ,EACtCsB,EAAOX,EAAEM,QAAUX,EAAWM,QAAQX,EAGtCsB,EAAOC,OAAOC,WAAajB,EAAUI,QAAQc,YAC7CC,EAAOH,OAAOI,YAAcpB,EAAUI,QAAQiB,aAE9CC,EAAeC,KAAKC,IAAI,EAAGD,KAAKE,IAAIZ,EAAME,IAC1CW,EAAeH,KAAKC,IAAI,EAAGD,KAAKE,IAAIX,EAAMK,IAEhD7B,EAAY,CAAEE,EAAG8B,EAAc7B,EAAGiC,KACjC,CAAChC,IAEEiC,EAAgBzB,sBAAY,KAChCP,GAAc,IACb,IAGHiC,IAAMC,UAAU,KACd,GAAInC,EAIF,OAHAoC,SAASC,iBAAiB,YAAanB,GACvCkB,SAASC,iBAAiB,UAAWJ,GAE9B,KACLG,SAASE,oBAAoB,YAAapB,GAC1CkB,SAASE,oBAAoB,UAAWL,KAG3C,CAACjC,EAAYkB,EAAiBe,IAOjC,OAAK/B,EAGHqC,eAAA,OACEC,IAAKlC,EACLmC,UAAU,cACVC,MAAO,CACL5B,KAAK,GAAD6B,OAAKhD,EAASG,EAAC,MACnBkB,IAAI,GAAD2B,OAAKhD,EAASI,EAAC,OAClB6C,SAAA,CAGFL,eAAA,OACEE,UAAU,YACVI,YAAatC,EAAgBqC,SAAA,CAE7BE,cAAA,QAAML,UAAU,aAAYG,SAAC,WAC7BE,cAAA,OAAKL,UAAU,kBAAiBG,SAC9BE,cAAA,OACEL,UAAU,YACVM,QAzBUC,KAClB7C,GAAa,GACN,OAAPT,QAAO,IAAPA,QAuB6BkD,SACtB,cAOLE,cAAA,OAAKL,UAAU,oBA5BI,M,MCrDVQ,MAZOA,IAMlBH,cAAA,OAAKL,UAAU,MAAKG,SAClBE,cAACtD,EAAY,CAACE,QANEsD,KAClBE,QAAQC,IAAI,sBCFHC,IAASC,WACpBjB,SAASkB,eAAe,SAGrBC,OACHT,cAACZ,IAAMsB,WAAU,CAAAZ,SACfE,cAACG,EAAG,M","file":"static/js/main.2ff383de.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport './DominoWindow.css';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface DominoWindowProps {\n  onClose?: () => void;\n}\n\nconst DominoWindow: React.FC<DominoWindowProps> = ({ onClose }) => {\n  const [position, setPosition] = useState<Position>({ x: 20, y: 50 });\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(true);\n  const dragOffset = useRef<Position>({ x: 0, y: 0 });\n  const windowRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    if (!windowRef.current) return;\n    \n    setIsDragging(true);\n    const rect = windowRef.current.getBoundingClientRect();\n    dragOffset.current = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n    e.preventDefault();\n  }, []);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !windowRef.current) return;\n    \n    const newX = e.clientX - dragOffset.current.x;\n    const newY = e.clientY - dragOffset.current.y;\n    \n    // Constrain to viewport\n    const maxX = window.innerWidth - windowRef.current.offsetWidth;\n    const maxY = window.innerHeight - windowRef.current.offsetHeight;\n    \n    const constrainedX = Math.max(0, Math.min(newX, maxX));\n    const constrainedY = Math.max(0, Math.min(newY, maxY));\n    \n    setPosition({ x: constrainedX, y: constrainedY });\n  }, [isDragging]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add global mouse event listeners\n  React.useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const handleClose = () => {\n    setIsVisible(false);\n    onClose?.();\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div\n      ref={windowRef}\n      className=\"outer-shell\"\n      style={{\n        left: `${position.x}px`,\n        top: `${position.y}px`,\n      }}\n    >\n      {/* Title Bar */}\n      <div \n        className=\"title-bar\"\n        onMouseDown={handleMouseDown}\n      >\n        <span className=\"title-text\">Domino</span>\n        <div className=\"window-controls\">\n          <div \n            className=\"close-btn\"\n            onClick={handleClose}\n          >\n            Ã—\n          </div>\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"content-area\">\n        {/* You can add Domino-related UI here */}\n      </div>\n    </div>\n  );\n};\n\nexport default DominoWindow; ","import React from 'react';\nimport DominoWindow from './DominoWindow';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const handleClose = () => {\n    console.log('Window closed');\n  };\n\n  return (\n    <div className=\"App\">\n      <DominoWindow onClose={handleClose} />\n    </div>\n  );\n};\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"sourceRoot":""}